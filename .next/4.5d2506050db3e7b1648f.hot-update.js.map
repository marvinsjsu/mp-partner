{"version":3,"file":"4.5d2506050db3e7b1648f.hot-update.js","sources":["webpack:///components/SendNotification.js"],"sourcesContent":["import { graphql } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nfunction SendNotification ({ createPost }) {\n  function handleSubmit (event) {\n    event.preventDefault()\n\n    const form = event.target\n\n    const formData = new window.FormData(form)\n    createPost(formData.get('title'), formData.get('url'))\n\n    form.reset()\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Submit</h1>\n      <input placeholder='title' name='title' type='text' required />\n      <input placeholder='message' name='message' type='text' required />\n      <button type='submit'>Submit</button>\n      <style jsx>{`\n        form {\n          border-bottom: 1px solid #ececec;\n          padding-bottom: 20px;\n          margin-bottom: 20px;\n        }\n        h1 {\n          font-size: 20px;\n        }\n        input {\n          display: block;\n          margin-bottom: 10px;\n        }\n      `}</style>\n    </form>\n  )\n}\n\nconst selectPush = gql`\n  mutation select_push(\n    $logged_in_user: String!, $zip: String!, $title: String!,\n    $rep: String!, $send: Boolean!, $platform: String!,\n    $state: String!, $radius: Float!, $user: String!,\n    $provider: String!, $message: String!, $api_key: String!\n  ) {\n    select_push(\n      logged_in_user: $logged_in_user, zip: $zip, title: $title,\n      rep: $rep, send: $send, platform: $platform, state: $state,\n      radius: $radius, user: $user, provider: $provider,\n      message: $message, api_key: $api_key\n    ) {\n      response_status,\n      users\n    }\n  }\n`\n\nexport default graphql(selectPush, {\n  props: ({ mutate }) => ({\n    selectPush: (logged_in_user, zip, title, rep, send, platform, state, radius, user, provider, message, api_key) =>\n      mutate({\n        variables: { logged_in_user, zip, title, rep, send, platform, state, radius, user, provider, message, api_key },\n        update: (proxy, { data: { selectPush } }) => {\n          const data = proxy.readQuery({\n            query: allPosts,\n            variables: allPostsQueryVars\n          })\n          proxy.writeQuery({\n            query: allPosts,\n            data: {\n              ...data,\n              allPosts: [createPost, ...data.allPosts]\n            },\n            variables: allPostsQueryVars\n          })\n        }\n      })\n  })\n})(SendNotification)\n\n\n\n// WEBPACK FOOTER //\n// components/SendNotification.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAqBA;AACA;AACA;AAmBA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAFA;AAIA;AANA;AAQA;AAfA;AADA;AADA;AAAA;AADA;;;;A","sourceRoot":""}